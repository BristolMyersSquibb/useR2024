---
title: "No-Code Data Analysis and Dashboards with {blockr}"
author: "John Coene (Opifex) and David Granjon (cynkra GmbH)"
format: 
  revealjs:
    footer: "Footer text"
    css: [
      "assets/style/bootstrap.min.css",
      "assets/style/extra.css"
    ]
    view-distance: 5
    mermaid:
      theme: default
    height: 900
    width: 1600
    code-link: true
    code-copy: true
    fontsize: 24pt
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    chalkboard: true
    transition: slide
    background-transition: fade
    title-slide-attributes:
        data-state: "hide-menubar"
    simplemenu:
        barhtml:
            header: "<div class='menubar'><ul class='menu'></ul><div>"
            #footer: "<img src='...' class='slide-logo r-stretch'>"
        scale: 0.67
revealjs-plugins:
  - simplemenu
  - attribution
filters:
  - quarto-ext/shinylive
editor:
    render-on-save: true
---

```{r setup}
library(shinylive)
library(bslib)
```

# ![shiny logo](assets/img/shiny.svg){.center width=25%} {data-stack-name="Intro"}

> __Easy__ web apps for data science without the compromises

## ~~Easy~~ Not so easy web apps for data science without the compromises {.center style="font-size: 1.5em"}


## A cooking approach to data science 🍲

### Imagine if we could build an interactive datapipeline like we would prepare a meal 😳

:::{.incremental}
- Follow a recipe.
- Find the ingredients.
:::

## Develop enterprise-grade dashboards isn't easy

::::{.columns}

:::{.column}
![](assets/img/undraw_cooking_p7m1.svg){width=50%}
:::

:::{.column}
- Do you know how to prepare a meal without the right recipe?
- Do you have the right ingredients?
:::

::::


## 💡 Introducing {blockr}

::::{.columns}

:::{.column}
![](assets/img/undraw_empty_cart_co35.svg){width=50%}
:::

:::{.column}
- __No-Code__ Dashboard builder for R.
- "Shiny's WordPress".
- __Supermarket__ for data analysis with R.
:::

::::

## blockr vs Shiny

::::{.columns}

:::{.column}
```{r}
# shiny code
```
:::

:::{.column}
```{r}
# blockr code
```
:::

::::


## {blockr}'s mission statement

::::{.columns}

:::{.column}
![](assets/img/undraw_super_woman_dv-0-y.svg){width=50%}
:::

:::{.column}
- Reduce back and forth between Shiny developers and data scientist.
- Cut down development time from __weeks__ to __days__.
- Extendable.
- Reproducible code.
:::

::::

# bockr 101 {data-stack-name="blockr 101"}

## Fields: the base ingredients 🥦 🥚

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
%%| fig-width: 6
flowchart TD
  subgraph field
    value(Value)
    title(Title)
    descr(Description)
    status(Status)
  end
  field --> shiny
  subgraph shiny
    ui(User interface)
  end
```

:::

:::{.column}
A __field__:

- TBD.
- Used to build the block expression.
- Attributes are used to build Shiny inputs (id, label, ...).

:::

::::

## Blocks: a recipe step 🥦 🥚

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  data_in(Data input)
  result(result)
  subgraph block
    field1(Field 1)
    field2(Field 2)
    field1 --> expr
    field2 --> expr
    expr(Expression)
  end
  expr --> result
  data_in --> block
```
:::

:::{.column}
A __block__ contains:

- __fields__, that are translated into Shiny inputs.
- An __expression__, evaluated with input data: `data |> select(<COLNAMES>)`.
- (Optional) input data.
- A __result__, of the evaluated expression.
- A __class__ for customization (see advanced part).
:::

::::

## How to build a `dplyr::select` block?

Data wrangling blocks

::::{.columns}

:::{.column}
```{r, echo=TRUE, eval=FALSE}
data |> select(<COLNAME>)
```

1 field `<COLNAME>`
:::

:::{.column}
```{r, echo=TRUE, eval=FALSE}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  data_in(Data input)
  data_out(Transformed data)
  subgraph block
    select_col[Select column]
  end
  data_in --> block --> data_out
```
:::

::::

## How to build a `dplyr::filter` block?

::::{.columns}

:::{.column}
```{r, echo=TRUE, eval=FALSE}
data |> filter(<COLNAME> <FILTER_FUNC> <FILTER_VALUE>, ...)

# data |> filter(col1 == "test")
```

3 __fields__, `<FILTER_VALUE>` depends on `<COLNAME>`
:::

:::{.column}
blockr translation
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  data_in(Data input)
  data_out(Transformed data)
  subgraph block
    select_col[Select columns] --> filter_func[Filter function ==, !=] --> filter_val[Filter values]
  end
  data_in --> block --> data_out
```
:::

::::

## The stack: data analysis recipe 📜

Mixing blocks together leads to a data pipeline __recipe__

<br>

::::{.columns}

:::{.column}
![](assets/img/undraw_diet_ghvw.svg)
:::

:::{.column}
Collection of instructions (blocks) to go from __data import__ to __wrangling__ (and optionally visualisation)

```{mermaid}
%%| mermaid-format: svg
flowchart TD
  subgraph stack
    direction TB
    input(Data);
    transform(Transform);
    output(Result);
    input --> transform --> output;
  end
```
:::

::::

## The workspace: the dinner party

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  subgraph stack
    direction TB
    input_1(Data);
    transform_1(Transform);
    output_1(Result);
    input_1 --> transform_1 --> output_1;
  end
  output_1 --> input_2
  subgraph stack2
    direction TB
    input_2(Data);
    transform_2(Transform);
    output_2(Visualize);
    input_2 --> transform_2 --> output_2;
  end
```
:::

:::{.column}
Collection of recipes (stacks) to build a dashboard
:::

::::

## blockr demo

```{shinylive-r}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800
## file: app.R
webr::install("blockr", repos = "https://blockr-org.github.io/webr-repos")
webr::install("blockr.data", repos = "https://blockr-org.github.io/webr-repos")

library(blockr)

stack <- new_stack(filesbrowser_block, csv_block, select_block)
serve_stack(stack)

## file: penguins.csv
species,island,bill_length_mm,bill_depth_mm,flipper_length_mm,body_mass_g,sex
Adelie,Torgersen,34.4,18.4,184,3325,FEMALE
Adelie,Torgersen,46,21.5,194,4200,MALE
Adelie,Biscoe,37.8,18.3,174,3400,FEMALE
Adelie,Biscoe,37.7,18.7,180,3600,MALE
Adelie,Biscoe,40.5,18.9,180,3950,MALE
Adelie,Dream,39.5,16.7,178,3250,FEMALE
Adelie,Dream,37.2,18.1,178,3900,MALE
Adelie,Dream,39.5,17.8,188,3300,FEMALE
Adelie,Dream,40.9,18.9,184,3900,MALE
Adelie,Biscoe,39.6,17.7,186,3500,FEMALE
Adelie,Biscoe,40.1,18.9,188,4300,MALE
Adelie,Biscoe,35,17.9,190,3450,FEMALE
Adelie,Torgersen,35.9,16.6,190,3050,FEMALE
Adelie,Torgersen,41.8,19.4,198,4450,MALE
Adelie,Torgersen,33.5,19,190,3600,FEMALE
Chinstrap,Dream,42.4,17.3,181,3600,FEMALE
Chinstrap,Dream,48.5,17.5,191,3400,MALE
Chinstrap,Dream,43.2,16.6,187,2900,FEMALE
Gentoo,Biscoe,46.1,13.2,211,4500,FEMALE
Gentoo,Biscoe,50,16.3,230,5700,MALE
Gentoo,Biscoe,48.7,14.1,210,4450,FEMALE
```

# The registry: the blocks supermarket {data-stack-name="Registry"}

## Registry 101

# Create your own blocks: the blocks supermarket {data-stack-name="Extend"}

## Create new blocks


# We need you! {data-stack-name="Conclusion"}

## Use blocks and build dashboard

Share dashboard with your teams to speed up data analysis

## Create new blocks to help your data scientists

You're an advanced R developer, you can extend blockr!
