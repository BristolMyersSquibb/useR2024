---
title: "No-Code Data Analysis and Dashboards with {blockr}"
author: "John Coene (The Y Company) and David Granjon (cynkra GmbH)"
format: 
  revealjs:
    #code-annotations: select
    footer: "Funded by <img class=\"mb-4\" src=\"assets/img/bms.svg\"/>"
    include-in-header:
      - text: |
          <script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.1/dist/mermaid.min.js"></script>
    css: [
      "assets/style/bootstrap.min.css",
      "assets/style/extra.css"
    ]
    view-distance: 5
    mermaid:
      theme: default
    height: 900
    width: 1600
    code-link: true
    code-copy: true
    fontsize: 24pt
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    chalkboard: true
    transition: none
    background-transition: none
    title-slide-attributes:
        data-state: "hide-menubar"
    simplemenu:
        barhtml:
            header: "<div class='menubar'><ul class='menu'></ul><div>"
            #footer: "<img src='...' class='slide-logo r-stretch'>"
        scale: 0.67
revealjs-plugins:
  - simplemenu
  - attribution
filters:
  - quarto-ext/shinylive
editor:
    render-on-save: true
---

```{r setup}
library(shinylive)
library(bslib)
library(palmerpenguins)
library(ggplot2)
library(dplyr)
```

# A cooking approach to data science {background-image="assets/img/undraw_diet_ghvw.svg" background-size="40%" data-stack-name="Intro" style="margin-top: -350px; font-size: 1.5em;"}

<!--
Imagine if we could build an interactive datapipeline like we would prepare a meal ðŸ˜³
--->


## ![shiny homepage](assets/img/easy-browser.png){.center width=50% style="margin-left: 350px;"}

## ![shiny homepage corrected](assets/img/notsoeasy-browser.png){.center width=50% style="margin-left: 350px;"}

## Developing enterprise-grade dashboards isn't easy {background-image="assets/img/undraw_lost_re_xqjt.svg" background-size="40%" style="font-size: 1.5em"}

<!-- 
- Do you know how to prepare a meal without the right recipe?
- Do you have the right ingredients?
-->



## ðŸ’¡ Introducing {blockr} {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
![](assets/img/undraw_empty_cart_co35.svg){width=75%}
:::

:::{.column}

:::{.incremental}
- __Supermarket__ for data analysis with R.
- __No-Code__ Dashboard builder, "Shiny's WordPress" ...
- ... __Extendable__ by developers.
- Reproducible code.
:::

:::

::::


# blockr 101 {data-stack-name="blockr 101" background-image="assets/img/undraw_cooking_p7m1.svg" background-size="40%" style="margin-top: -350px; font-size: 1.5em"}

## Palmer penguins plot {style="font-size: 1.5em"}

. . . 

Histogram showing `flipper length` as function of `body mass` by `species` only for `female` penguins.

. . .

```{r}
#| echo: true
#| code-line-numbers: "1|2|3|4"
#| output-location: column-fragment
penguins |>
  filter(sex == "female") |>
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(aes(color = species, shape = species), size = 2)
```

## The stack: a data analysis recipe {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  subgraph stack1[Stack]
    direction TB
    subgraph input_block[Block 1]
      input(Data: dataset, browser, ...)
    end
    subgraph transform_block[Block 2]
      transform(Transform block: filter, select ...)
    end
    subgraph output_block[Block 3]
      output(Result/transform: plot, filter, ...)
    end
    input_block --> |data| transform_block --> |data| output_block
  end
```
:::

:::{.column}
Collection of instructions, __blocks__, from __data import__ to __wrangling/visualization__.
:::

::::

## blockr demo {style="font-size: 1.5em"}

![](assets/movies/palmer-penguins-blockr-demo.mov)

## How much code would it take with Shiny? {style="font-size: 1.5em"}

. . .

```{r, echo=TRUE, eval=FALSE}
library(shiny)
library(bslib)
library(ggplot2)
library(palmerpenguins)

shinyApp(
  ui = page_fluid(
    layout_sidebar(
      sidebar = sidebar(
        radioButtons("sex", "Sex", unique(penguins$sex), "female"),
        selectInput(
          "xvar", 
          "X var", 
          colnames(dplyr::select(penguins, where(is.numeric))),
          "body_mass_g"
        ),
        selectInput(
          "yvar",
          "Y var",
          colnames(dplyr::select(penguins, where(is.numeric))),
          "flipper_length_mm"
        ),
        selectInput(
          "color",
          "Color and shape",
          colnames(dplyr::select(penguins, where(is.factor))),
          "species"
        )
      ),
      plotOutput("plot")
    )
  ),
  server = function(input, output, session) {
    output$plot <- renderPlot({
      penguins |>
        filter(sex == !!input$sex) |>
        ggplot(aes(x = !!input$xvar, y = !!input$yvar)) +
        geom_point(aes(color = !!input$color, shape = !!input$color), size = 2)
    })
  }
)
```

## It's much easier with blockr {style="font-size: 1.5em"}

. . .

```{r, echo=TRUE, eval=FALSE}
library(blockr)
new_stack( # <1>
  data_block = new_dataset_block("penguins", "palmerpenguins"), # <2>
  filter_block = new_filter_block("sex", "female"), #<2>
  plot_block = new_ggplot_block("body_mass_g", "flipper_length_mm"), # <3>
  layer_block = new_geompoint_block("species", "species") # <4>
)
serve_stack(stack) # <5>
```

1. Create the stack.
2. Import data.
3. Create the plot.
4. Add it a layer.
5. Serve a Shiny app.

## Connecting stacks: towards a dinner party {background-image="assets/img/undraw_special_event.svg" background-size="40%" style="font-size: 1.5em"}


## The workspace {style="font-size: 1.5em"}

::::{.columns}

:::{.column width=60%}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  subgraph s1[Stack 1]
    direction TB
    input_s1(Data)
    transform_s1(Transform)
    input_s1 --> |data| transform_s1
  end
  transform_s1 --> |data| input_s2
  subgraph s2[Stack 2]
    direction TB
    input_s2(Data)
    transform_s2(Transform)
    output_s2(Visualize)
    input_s2 --> |data| transform_s2 --> |data| output_s2
  end
```
:::

:::{.column width=40%}
Collection of __recipes__ (stacks) to build a __dashboard__.

:::

::::


## Workspace demo {style="font-size: 1.5em"}

![](assets/movies/palmer-penguins-workspace-demo.mov)

## How do I create a workspace? {style="font-size: 1.5em"}

```r
library(blockr)
# Creates an empty workspace
set_workspace( # <1>
  stack_1 = new_stack() # <2>
  stack_2 = new_stack()
)
serve_workspace() # <3>
```

1. Initialise.
2. Optional: add stacks.
3. Serve Shiny app.


## How far can I go with blockr? {background-image="assets/img/undraw_add_post_re_174w.svg" background-size="90%" style="margin-left: 450px; margin-top: 700px; font-size: 1.5em"}



# Create your own blocks </br> supermarket {data-stack-name="Extend" background-image="assets/img/undraw_empty_cart_co35.svg" background-size="60%" style="margin-top: -300px; font-size: 1.5em"}

## Today's mission {style="font-size: 1.5em"}

Create a new __lm()__ block: 

`lm(bill_length_mm ~ flipper_length_mm, data = penguins)`

## Create new blocks: lm block 1/4 {auto-animate=true style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{r, eval=FALSE, echo=TRUE}
new_lm_block <- function(y = character(), predictor = character(), ...) {

}
```
:::

:::{.column}
- Create the `constructor`.
:::

::::

## Create new blocks: lm block 2/4 {auto-animate=true style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{r, eval=FALSE, echo=TRUE}
new_lm_block <- function(y = character(), predictor = character(), ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    y = new_select_field(y, all_cols, type = "name"),
    predictor = new_select_field(predictor, all_cols, type = "name")
  )

  new_block(
    fields = fields,

  )
}
```
1. `type` allows to pass in cols as name instead of strings.
:::

:::{.column}
::: {style="color: gray;"}
- Create the `constructor`.
:::
- Add field(s): Y and predictor columns.
:::

::::

## Create new blocks: lm block 3/4 {auto-animate=true style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{r, eval=FALSE, echo=TRUE}
new_lm_block <- function(y = character(), predictor = character(), ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    y = new_select_field(y, all_cols, type = "name"),
    predictor = new_select_field(predictor, all_cols, type = "name")
  )

  new_block(
    fields = fields,
    expr = quote({
      model <- lm(data = data, formula = .(y) ~ .(predictor))
      lm(f, data = data)
    }),

  )
}
```
:::

:::{.column}
::: {style="color: gray;"}
- Create the `constructor`.
- Add field(s): selected column.
:::
- Provide expression: use `quote` and pass field name with `.(field_name)`. ^[Needed by `bquote` for partial substitution.]
:::

::::

## Create new blocks: lm block 4/4 {auto-animate=true style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{r, eval=FALSE, echo=TRUE}
new_lm_block <- function(y = character(), predictor = character(), ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    y = new_select_field(y, all_cols, type = "name"),
    predictor = new_select_field(predictor, all_cols, type = "name")
  )

  new_block(
    fields = fields,
    expr = quote({
      model <- lm(data = data, formula = .(y) ~ .(predictor))
      broom::tidy(model)
    }),
    ...,
    class = c("lm_block", "transform_block")
  )
}
```
:::

:::{.column}
::: {style="color: gray;"}
- Create the `constructor`.
- Add field(s): Y and predictor columns.
- Provide expression: use `quote` and pass field name with `.(field_name)`. ^[Needed by `bquote` for partial substitution.]
:::
- Give it the correct classes: `transform_block` + a custom class.
:::

::::

## Testing our new block {style="font-size: 1.5em"}

```{shinylive-r}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800
## file: app.R
webr::install("blockr", repos = c("https://blockr-org.github.io/webr-repos", "https://repo.r-wasm.org"))
library(blockr)
library(palmerpenguins)

new_lm_block <- function(y = character(), predictor = character(), ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    y = new_select_field(y, all_cols, type = "name"),
    predictor = new_select_field(predictor, all_cols, type = "name")
  )

  new_block(
    fields = fields,
    expr = quote({
      model <- lm(data = data, formula = .(y) ~ .(predictor))
      broom::tidy(model)
    }),
    ...,
    class = c("lm_block", "transform_block")
  )
}

stack <- new_stack(
  data_block = new_dataset_block("penguins", "palmerpenguins"), 
  lm_block = new_lm_block("bill_length_mm", "body_mass_g")
)
serve_stack(stack)
```

## How do we make custom blocks available to users? {style="font-size: 1.5em"}

## The registry: the blocks supermarket {data-stack-name="Registry" style="font-size: 1.5em"}

::::{.columns}

:::{.column width=70%}
```{mermaid}
%%| mermaid-format: svg
flowchart LR
  subgraph blockr_ggplot2[blockr.ggplot2]
    new_block1[New block]
    new_block2[New block]
  end
  subgraph blockr_echarts4r[blockr.echarts4r]
    new_block3[New block]
    new_block4[New block]
  end
  blockr_ggplot2 --> |register| registry
  blockr_echarts4r --> |register| registry
  subgraph registry[Registry]
    subgraph select_reg[Select block]
      reg_name[Name: select block]
      reg_descr[Description: select columns in a table]
      reg_classes[Classes: select_block, tranform_block]
      reg_input[Input: data.frame]
      reg_output[Output: data.frame]
      reg_package[Package: blockr]
    end
    subgraph filter_reg[Filter block]
    end
    filter_reg --x |unregister| trash["fa:fa-trash"]
  end
```
:::

:::{.column width=30%}
- __Information__ about blocks. 
- __Shared__ between block packages.
:::

::::


## Filling the supermarket with block {style="font-size: 1.5em"}

```{r echo=TRUE, eval=FALSE}
register_lm_block <- function(pkg) {
  register_block(
    constructor = new_lm_block,
    name = "lm block",
    description = "Create a linear model block",
    classes = c("lm_block", "transform_block"),
    input = "data.frame",
    output = "data.frame",
    package = pkg
  )
}

# Put in zzz.R
.onLoad <- function(libname, pkgname) {
  register_lm_block(pkgname)
  invisible(NULL)
}
```


## Customize blockr {style="font-size: 1.5em"}

:::{incremental}
- S3 programing: allows to customize behavior depending on object class
:::

```{mermaid}
%%| mermaid-format: svg
classDiagram
  class block
  block : +name
  block : +expr
  block : +result
  block : +layout
  block : +class
  block : +initialize_block(block)
  block : +is_initialized(block)
  block : +generate_code(block)
  block : +evaluate_block(block, ...)
  block : +generate_server(block, ...)
  block : +update_fields(block, ...)
```

## TBD

Maybe show the blockr.app video

# We need you! {data-stack-name="Conclusion" background-image="assets/img/undraw_co_workers_re_1i6i.svg" background-size="50%" style="font-size: 1.5em; margin-top: -350px"}

## Getting started {style="font-size: 1.5em"}

. . .

1. Install

```{r, eval=FALSE, echo=TRUE}
pak::pak("blockr-org/blockr")

library(blockr)
serve_stack(new_stack())
```

. . .

2. Read the doc at [https://blockr-org.github.io/blockr/index.html](https://blockr-org.github.io/blockr/index.html).

. . . 

3. Enjoy!

## Use blocks and build dashboards {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
![](assets/img/undraw_data_trends_re_2cdy.svg){width="100%"}
:::

:::{.column}
__Share__ dashboards with your teams to __speed up__ data analysis
:::

::::


## Create blocks to help your data scientists {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
![](assets/img/undraw_building_blocks_re_5ahy.svg){width="80%"}
:::

:::{.column}
You're an __advanced__ R developer, you can __extend__ blockr!
:::

::::


## Our team {style="font-size: 1.5em"}

```{r}
library(shiny)
library(bslib)

tags$div(
  class = "row row-cols-1 row-cols-md-3 g-4",
  tags$div(
    class = "col",
    tags$div(
      class = "card h-100",
      #tags$img(
      #  src = "assets/img/bms.svg",
      #  class = "card-img-top m-auto",
      #  alt = "..."
      #),
      tags$div(
        class = "card-body",
        tags$h5(
          class = "card-title",
          "Karma Tarap"
        ),
        tags$img(
          src = "assets/img/bms.svg",
          alt = "..."
        )
      ),
      tags$div(
        class = "card-footer",
        tags$small(
          class = "text-body-secondary",
          a(href = "https://www.bms.com/", "https://www.bms.com/")
        )
      )
    )
  ),
  tags$div(
    class = "col",
    tags$div(
      class = "card h-100",
      #tags$img(
      #  src = "assets/img/ylogo.png",
      #  class = "card-img-top m-auto",
      #  alt = "...",
      #  width = "25%"
      #),
      tags$div(
        class = "card-body",
        tags$h5(
          class = "card-title",
          "John Coene"
        ),
        tags$img(
        src = "assets/img/ylogo-full.png",
        alt = "..."
      )
      ),
      tags$div(
        class = "card-footer",
        tags$small(
          class = "text-body-secondary",
          a(href = "https://the-y-company.com/", "https://the-y-company.com/")
        )
      )
    )
  ),
  tags$div(
    class = "col",
    tags$div(
      class = "card h-100",
      #tags$img(
      #  src = "assets/img/logo-cynkra.svg",
      #  class = "card-img-top m-auto",
      #  alt = "..."
      #),
      tags$div(
        class = "card-body",
        tags$h5(
          class = "card-title",
          "Nicolas Bennett, Christoph Sax, David Granjon"
        ),
        tags$img(
          src = "assets/img/logo-cynkra.svg",
          alt = "..."
        )
      ),
      tags$div(
        class = "card-footer",
        tags$small(
          class = "text-body-secondary",
          a(href = "https://cynkra.com/", "https://cynkra.com/")
        )
      )
    )
  )
)


#div(
#  class = "row row-cols-1 row-cols-md-3 g-4",
#  div(
#    class = "col",
#    card(
#      class = "h-100",
#      card_image("assets/img/bms.svg", class = "m-auto"),
#      card_title("Karma Tarap")
#    )
#  ),
#  div(
#    class = "col",
#    card(
#      class = "h-100",
#      card_image("assets/img/ylogo.png", width = "25%", class = "m-auto"),
#      card_title("John Coene")
#    )
#  ),
#  div(
#    class = "col",
#    card(
#      class = "h-100",
#      card_image("assets/img/logo-cynkra.svg", class = "m-auto"),
#      card_title("Nicolas Bennett, Christoph Sax, David Granjon")
#    )
#  )
#)
```

# Appendix {data-stack-name="Appendix" style="font-size: 1.5em"}

## Zoom on blocks and fields ðŸ¥¦ ðŸ¥š {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
%%| fig-width: 10
flowchart TD
  blk_data_in(Data input)
  blk_data_out[Output]
  subgraph blk_block[Block]
    subgraph blk_field1[Field 1]
      value(Value)
      title(Title)
      descr(Description)
      status(Status)
    end
    blk_field2(Field 2)
    blk_field1 --> blk_expr
    blk_field2 --> blk_expr
    blk_expr(Expression)
    blk_res(result)
    blk_expr --> blk_res
  end
  blk_data_in --> blk_block --> blk_data_out
```
:::

:::{.column}
- __Fields__ are __ingredients__.
- A __block__ is a recipe __step__.
:::

:::

::: {.content-visible when-profile="speaker"}
:::: {.notes}
A __block__ contains:

- __fields__, build the block expression and translated into Shiny inputs.
- An __expression__, evaluated with input data: `data |> select(<COLNAMES>)`.
- (Optional) input data.
- A __result__, of the evaluated expression.
- A __class__ for customization (see advanced part).
::::
:::

## How to build a `dplyr::filter` block? {style="font-size: 1.5em"}

::::{.columns}

:::{.column width="70%"}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  filt_data_in[Data input]
  filt_data_out[Transformed data]
  subgraph filt_block[Filter block]
    filt_select_col[Select columns]
    filt_filter_func[Filter function ==, !=]
    filt_filter_val[Filter values]
    filt_expr[Expression]
    filt_res[Result]

    filt_select_col --> filt_expr
    filt_select_col --> |depends| filt_filter_val
    filt_filter_val --> filt_expr
    filt_filter_func --> filt_expr

    filt_expr --> filt_res
  end
  filt_data_in --> filt_block --> filt_data_out
```
:::

:::{.column width="30%"}
```{r, echo=TRUE, eval=FALSE}
data |> filter(<COLNAME> <FILTER_FUNC> <FILTER_VALUE>, ...)

# data |> filter(col1 == "test")
```

3 __fields__:

- `<COLNAME>`
- `<FILTER_FUNC>`
- `<FILTER_VALUE>`: depends on `<COLNAME>`
:::

:::

## blockr: add block demo {style="font-size: 1.5em"}

```{shinylive-r}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800
webr::install("blockr", repos = c("https://blockr-org.github.io/webr-repos", "https://repo.r-wasm.org"))
library(blockr)
library(palmerpenguins)
library(ggplot2)

new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {

  data_cols <- function(data) colnames(data)

  new_block(
    fields = list(
      x = new_select_field(col_x, data_cols, type = "name"),
      y = new_select_field(col_y, data_cols, type = "name")
    ),
    expr = quote(
      ggplot(mapping = aes(x = .(x), y = .(y)))
    ),
    class = c("ggplot_block", "plot_block"),
    ...
  )
}

new_geompoint_block <- function(color = character(), shape = character(), ...) {

  data_cols <- function(data) colnames(data$data)

  new_block(
    fields = list(
      color = new_select_field(color, data_cols, type = "name"),
      shape = new_select_field(shape, data_cols, type = "name")
    ),
    expr = quote(
      geom_point(aes(color = .(color), shape = .(shape)), size = 2)
    ),
    class = c("plot_layer_block", "plot_block"),
    ...
  )
}

new_penguins_block <- function() {
  new_dataset_block("penguins", "palmerpenguins")
}

register_block(
  constructor = new_ggplot_block,
  name = "ggplot2 block",
  description = "Create a ggplot object",
  classes = c("ggplot_block", "plot_block"),
  input = "data.frame",
  output = "ggplot2",
  package = "blockr.ggplot2"
)

register_block(
  constructor = new_geompoint_block,
  name = "geompoint block",
  description = "Create a geom point plot layer",
  classes = c("plot_layer_block", "plot_block"),
  input = "ggplot2",
  output = "ggplot2",
  package = "blockr.ggplot2"
)

stack <- new_stack(
  data_block = new_dataset_block("penguins", "palmerpenguins")
  #filter_block = new_filter_block("sex", "female"), 
  #plot_block = new_ggplot_block("flipper_length_mm", "body_mass_g"),
  #layer_block = new_geompoint_block("species", "species")
)
serve_stack(stack)
```

## blockr: workspace demo {style="font-size: 1.5em"}

```{shinylive-r}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800
webr::install("blockr", repos = c("https://blockr-org.github.io/webr-repos", "https://repo.r-wasm.org"))
library(blockr)
library(palmerpenguins)
library(ggplot2)

new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {

  data_cols <- function(data) colnames(data)

  new_block(
    fields = list(
      x = new_select_field(col_x, data_cols, type = "name"),
      y = new_select_field(col_y, data_cols, type = "name")
    ),
    expr = quote(
      ggplot(mapping = aes(x = .(x), y = .(y)))
    ),
    class = c("ggplot_block", "plot_block"),
    ...
  )
}

new_geompoint_block <- function(color = character(), shape = character(), ...) {

  data_cols <- function(data) colnames(data$data)

  new_block(
    fields = list(
      color = new_select_field(color, data_cols, type = "name"),
      shape = new_select_field(shape, data_cols, type = "name")
    ),
    expr = quote(
      geom_point(aes(color = .(color), shape = .(shape)), size = 2)
    ),
    class = c("plot_layer_block", "plot_block"),
    ...
  )
}

new_penguins_block <- function() {
  new_dataset_block("penguins", "palmerpenguins")
}

new_lm_block <- function(y = character(), predictor = character(), ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    y = new_select_field(y, all_cols, type = "name"),
    predictor = new_select_field(predictor, all_cols, type = "name")
  )

  new_block(
    fields = fields,
    expr = quote({
      model <- lm(data = data, formula = .(y) ~ .(predictor))
      broom::tidy(model)
    }),
    ...,
    class = c("lm_block", "transform_block")
  )
}

register_block(
  constructor = new_lm_block,
  name = "Linear model block",
  description = "Create a linear model",
  classes = c("lm_block", "transform_block"),
  input = "data.frame",
  output = "data.frame",
  package = "blockr.lm"
)

register_block(
  constructor = new_ggplot_block,
  name = "ggplot2 block",
  description = "Create a ggplot object",
  classes = c("ggplot_block", "plot_block"),
  input = "data.frame",
  output = "ggplot2",
  package = "blockr.ggplot2"
)

register_block(
  constructor = new_geompoint_block,
  name = "geompoint block",
  description = "Create a geom point plot layer",
  classes = c("plot_layer_block", "plot_block"),
  input = "ggplot2",
  output = "ggplot2",
  package = "blockr.ggplot2"
)

register_block(
  constructor = new_penguins_block,
  name = "penguins data block",
  description = "Create a palmer penguins dataset block",
  classes = c("dataset_block", "data_block"),
  input = NA_character_,
  output = "data.frame",
  package = "blockr.custom"
)

set_workspace(
  stack_1 = new_stack(),
  stack2 = new_stack()
)
serve_workspace(clear = FALSE)
```